using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web;
using System.IO;
using System.Threading.Tasks;
using System.Net.Mail;
using System.Net.Security;
using Ionic.Zip;
using WebhostAPI;

namespace WebhostMySQLConnection.Web
{
    public class MailControler
    {
        #region Global Variables

        public static String AutoFooter = Environment.NewLine + Environment.NewLine +
            "################################################################################################" + Environment.NewLine +
            "# This Message was Automatically Generated by https://webhost.dublinschool.org                 #" + Environment.NewLine +
            "# If you believe you have recieved this message in Error please contact jason@dublinschool.org #" + Environment.NewLine +
            "################################################################################################";

        public struct SMTPAddress
        {
            public string Name;
            public string Email;
        }

        public static readonly SMTPAddress Webmaster = new SMTPAddress() { Name = "Jason Cox", Email = "jason@dublinschool.org" };

        public static readonly SMTPAddress DeanOfStudents = new SMTPAddress() { Name = "Simon McFall", Email = "smcfall@dublinschool.org" };
        public static readonly SMTPAddress AsstDeanOfStudents = new SMTPAddress() { Name = "Laurie LeClaire", Email = "lleclaire@dublinschool.org" };
        public static readonly SMTPAddress DeanOfAcademics = new SMTPAddress() { Name = "Sarah Doenmez", Email = "sdoenmez@dublinschool.org" };
        public static readonly SMTPAddress Nurse = new SMTPAddress() { Name = "Robin Newton", Email = "rnewton@dublinschool.org" };
        public static readonly SMTPAddress AthleticsDirector = new SMTPAddress() { Name = "Brooks Johnson", Email = "bjohnson@dublinschool.org" };

        private static SmtpClient mailClient = new SmtpClient()
        {
            Host = "localhost",
            DeliveryMethod = SmtpDeliveryMethod.Network,
            UseDefaultCredentials = true
        };

        #endregion
        #region To Webmaster
        /// <summary>
        /// Quick Mail To ME!
        /// </summary>
        /// <param name="Subject">Subject Line of the Email</param>
        /// <param name="Message">Message Body of the Email in Plain Text!</param>
        /// <param name="Sender">Pass in user here to send the email from the currently logged in user.</param>
        public static void MailToWebmaster(String Subject, String Message, ADUser Sender = null)
        {

            String UserName = "noreply";
            if (Sender != null)
                UserName = Sender.UserName;
            String DisplayName = "";
            using (WebhostEntities db = new WebhostEntities())
            {
                if (Sender == null)
                {
                    DisplayName = "No Reply";
                }
                else
                {
                    DisplayName = Sender.Name;
                }

                MailMessage mail = new MailMessage();
                mail.Subject = Subject;
                mail.Body = Message;
                mail.From = new MailAddress(UserName + "@dublinschool.org", DisplayName);
                mail.To.Add(new MailAddress(Webmaster.Email, Webmaster.Name));
                mail.ReplyToList.Add(UserName + "@dublinschool.org");
                try
                {
                    mailClient.Send(mail);
                    WebhostEventLog.Syslog.LogInformation("Sent Email to webmaster from {0}@dublinschool.org.  Subject: {1}{2}======================================={2}Body:{2}{3}", UserName, Subject, Environment.NewLine, Message);
                }
                catch (Exception e)
                {
                    WebhostEventLog.Syslog.LogError(e.Message);
                }
            }
        }
        #endregion

        #region Multiple Attachment Zipping

        /// <summary>
        /// packs files into a zip file.
        /// </summary>
        /// <param name="FileNames">List of paths relative to ~/</param>
        /// <param name="FileName">just the file name, no extension and no directory</param>
        /// <param name="Server"></param>
        /// <returns></returns>
        public static String PackForDownloading(List<String> FileNames, String FileName, HttpServerUtility Server = null)
        {
            String ZipFileName = "";
            FileStream fs;
            if (Server != null)
            {
                ZipFileName = "~/Temp/" + FileName + ".zip";

                if (File.Exists(Server.MapPath(ZipFileName)))
                    File.Delete(Server.MapPath(ZipFileName));

                fs = new FileStream(Server.MapPath(ZipFileName), FileMode.OpenOrCreate);
            }
            else if (!FileName.Contains("C:\\") && !FileName.Contains("W:\\"))
            {
                ZipFileName = String.Format("C:\\Temp\\{0}.zip", FileName);
                if (File.Exists(ZipFileName)) File.Delete(ZipFileName);

                fs = new FileStream(ZipFileName, FileMode.OpenOrCreate);
            }
            else
            {
                ZipFileName = FileName;
                if (File.Exists(ZipFileName)) File.Delete(ZipFileName);

                fs = new FileStream(ZipFileName, FileMode.OpenOrCreate);
            }

            using (ZipFile zip = new ZipFile())
            {
                foreach (String fileName in FileNames)
                {
                    try
                    {
                        zip.AddFile(Server.MapPath(fileName), "\\");
                    }
                    catch
                    {
                        try
                        {
                            zip.AddFile(fileName, "\\");
                        }
                        catch
                        {
                            WebhostEventLog.Syslog.LogInformation("Could not Add {0} to zip file.", fileName);
                        }
                    }
                }

                zip.Save(fs);
                fs.Close();
            }

            return ZipFileName;
        }

        #endregion

        #region To Specified User
        /// <summary>
        /// Generates a quick Email from the Webhost non-entity to the specified User.
        /// </summary>
        /// <param name="Subject">Subject Line of the Message</param>
        /// <param name="Body">Message Body Plain Text</param>
        /// <param name="User">Pass in user here to send mail to the logged in user</param>
        /// <param name="SenderAddress">Address to send from</param>
        /// <param name="SenderName">Display Name for the Sender</param>
        /// <param name="AttachmentFileName">FileName of Attachment File</param>
        public static void MailToUser(String Subject, String Body, ADUser User, String SenderAddress = "webhost@dublinschool.org", String SenderName = "Dublin School Master Bot", String AttachmentFileName = "null")
        {
            Body += AutoFooter;

            String UserName = User.UserName;
            String DisplayName = "";
            using (WebhostEntities db = new WebhostEntities())
            {
                if (User.UserName.Contains('_'))
                {
                    DisplayName = (from student in db.Students
                                   where student.UserName == UserName
                                   select new
                                   {
                                       Name = student.FirstName + " " + student.LastName
                                   }).Single().Name;
                }
                else
                {
                    DisplayName = (from teacher in db.Faculties
                                   where teacher.UserName == UserName
                                   select new
                                   {
                                       Name = teacher.FirstName + " " + teacher.LastName
                                   }).Single().Name;
                }

                MailMessage mail = new MailMessage();
                mail.Subject = Subject;
                mail.Body = Body;

                try
                {
                    mail.Attachments.Add(new Attachment(AttachmentFileName));
                }
                catch (Exception) { }

                mail.To.Add(new MailAddress(UserName + "@dublinschool.org", DisplayName));
                mail.From = new MailAddress(SenderAddress, SenderName);
                mail.ReplyToList.Add(SenderAddress);

                //SmtpClient mailClient = new SmtpClient();

                try
                {
                    mailClient.DeliveryMethod = SmtpDeliveryMethod.Network;
                    mailClient.UseDefaultCredentials = true;
                    mailClient.Send(mail);
                    //Log.log(Log.__MAIL + " " + Log.__SUCCESS, "Mail to " + DisplayName + " successful.\n\n" + Subject + "\n\n" + Body);
                }
                catch (Exception ex)
                {
                    String ExceptionMessage = "\n\nException:\n" + ex.Message;
                    while (ex.InnerException != null)
                    {
                        ex = ex.InnerException;
                        ExceptionMessage += "\n\n" + ex.Message;
                    }

                    MailToWebmaster("Failed Auto-Email", "Mail to " + UserName + " Failed.\n\n" + Subject + "\n\n" + Body + ExceptionMessage, User);
                    //Log.log(Log.__MAIL + " " + Log.__ERROR, "Mail to " + DisplayName + " Failed.\n\n" + Subject + "\n\n" + Body + ExceptionMessage);
                }
            }
        }

        /// <summary>
        /// Generate a quick email to the specified address.
        /// </summary>
        /// <param name="Subject">Subject Line</param>
        /// <param name="Body">Plain Text Body</param>
        /// <param name="RecipientAddress">To Address</param>
        /// <param name="RecipientName">To Name</param>
        /// <param name="SenderAddress">Sender Address (default is the Webhost Bot)</param>
        /// <param name="SenderName">Sender Name</param>
        /// <param name="AttachmentFileName">Attachment (if applicable)</param>
        /// <example>
        ///     To send an Email to the Dean of Students:
        ///     <code>MailControler.MailToUser("No Subject", "Boring Automated Message", MailControler.DeanOfStudents[0], MailControler.DeanOfStudents[1], "you@dublinschool.org", "Your Name");</code>
        /// </example>
        public static void MailToUser(String Subject, String Body, String RecipientAddress, String RecipientName, String SenderAddress = "noreply@dublinschool.org", String SenderName = "Dublin School Master Bot", String AttachmentFileName = "null")
        {
            Body += AutoFooter;
            using (WebhostEntities db = new WebhostEntities())
            {
                MailMessage mail = new MailMessage();
                mail.Subject = Subject;
                mail.Body = Body;

                try
                {
                    mail.Attachments.Add(new Attachment(AttachmentFileName));
                }
                catch (Exception) { }

                mail.To.Add(new MailAddress(RecipientAddress, RecipientName));
                mail.From = new MailAddress(SenderAddress, SenderName);
                mail.ReplyToList.Add(SenderAddress);

                //SmtpClient mailClient = new SmtpClient();

                try
                {
                    mailClient.DeliveryMethod = SmtpDeliveryMethod.Network;
                    mailClient.UseDefaultCredentials = true;
                    mailClient.Send(mail);
                    WebhostEventLog.Syslog.LogInformation("Mail sent to {0}.  Subject: {1}{2}=========================={2}Body:{2}{3}", RecipientAddress, Subject, Environment.NewLine, Body);
                }
                catch (Exception ex)
                {
                    String ExceptionMessage = "\n\nException:\n" + ex.Message;
                    while (ex.InnerException != null)
                    {
                        ex = ex.InnerException;
                        ExceptionMessage += "\n\n" + ex.Message;
                    }

                    MailToWebmaster("Failed Auto-Email", "Mail to " + RecipientName + " from " + SenderName + " Failed.\n\n" + Subject + "\n\n" + Body + ExceptionMessage);
                    WebhostEventLog.Syslog.LogError("Failed to send email to {0}<{1}>. Exception:  {2}", RecipientName, RecipientAddress, ExceptionMessage);
                }
            }
        }

        /// <summary>
        /// Generate a quick email to the specified address.
        /// </summary>
        /// <param name="Subject">Subject Line</param>
        /// <param name="Body">Plain Text Body</param>
        /// <param name="RecipientAddress">To Address</param>
        /// <param name="RecipientName">To Name</param>
        /// <param name="User">Pass in user here to generate an email send by the logged in user.</param>
        /// <param name="AttachmentFileName">Attachment (if applicable)</param>
        /// <example>
        ///     To send an Email to the Dean of Students:
        ///     <code>MailControler.MailToUser("No Subject", "Boring Automated Message", MailControler.DeanOfStudents[0], MailControler.DeanOfStudents[1], user);</code>
        /// </example>
        public static void MailToUser(String Subject, String Body, String RecipientAddress, String RecipientName, ADUser User, String AttachmentFileName = "null")
        {
            Body += AutoFooter;

            String UserName = User.UserName;
            String DisplayName = "";
            using (WebhostEntities db = new WebhostEntities())
            {
                if (User.UserName.Contains('_'))
                {
                    DisplayName = (from student in db.Students
                                   where student.UserName == UserName
                                   select new
                                   {
                                       Name = student.FirstName + " " + student.LastName
                                   }).Single().Name;
                }
                else
                {
                    DisplayName = (from teacher in db.Faculties
                                   where teacher.UserName == UserName
                                   select new
                                   {
                                       Name = teacher.FirstName + " " + teacher.LastName
                                   }).Single().Name;
                }

                MailMessage mail = new MailMessage();
                mail.Subject = Subject;
                mail.Body = Body;

                try
                {
                    mail.Attachments.Add(new Attachment(AttachmentFileName));
                }
                catch (Exception) { }

                mail.To.Add(new MailAddress(RecipientAddress, RecipientName));
                mail.From = new MailAddress(UserName + "@dublinschool.org", DisplayName);
                mail.ReplyToList.Add(UserName + "@dublinschool.org");

                //SmtpClient mailClient = new SmtpClient();

                try
                {
                    mailClient.DeliveryMethod = SmtpDeliveryMethod.Network;
                    mailClient.UseDefaultCredentials = true;
                    mailClient.Send(mail);
                    WebhostEventLog.Syslog.LogInformation("Mail sent from {4}@dublinschool.org to {0}.  Subject: {1}{2}=========================={2}Body:{2}{3}", RecipientAddress, Subject, Environment.NewLine, Body, User.UserName);
                }
                catch (Exception ex)
                {
                    String ExceptionMessage = "\n\nException:\n" + ex.Message;
                    while (ex.InnerException != null)
                    {
                        ex = ex.InnerException;
                        ExceptionMessage += "\n\n" + ex.Message;
                    }
                    MailToWebmaster("Failed Auto-Email", "Mail to " + RecipientName + " Failed.\n\n" + Subject + "\n\n" + Body + ExceptionMessage, User);
                    WebhostEventLog.Syslog.LogError("Failed to send email from {3}<{4}@dublinschool.org> to {0}<{1}>. Exception:  {2}", RecipientName, RecipientAddress, ExceptionMessage, User.Name, User.UserName);
                }
            }
        }
        #endregion

        #region Blast Emails

        /// TODO:  Rewrite the Attendance Update Email!

        /*public static void AttendanceUpdatedEmail(AttendanceMarking att, ADUser Sender)
        {
            try
            {
                String AttendanceFor = "";
                if (att.SectionIndex)
                    AttendanceFor = "[" + att.Section.Block.BlockName + "-Block] " + att.Section.Course.CourseName;
                else
                    AttendanceFor = att.AttendanceType.TypeName;

                String Subject = "Attendance Updated for " + AttendanceFor;
                String Body = String.Format("Dear {0},{1}{1}" +
                                            "Your Attendance Marking for {2} on {3} has been updated by {4}.{1}" +
                                            "You are now flaged as {5}.{1}{1}" +
                                            "Attendance Bot.",
                                            att.Student.FirstName,
                                            Environment.NewLine,
                                            AttendanceFor,
                                            att.AttendanceDate,
                                            Sender.UserName,
                                            att.AttendanceLabel.AttLabelLong);

                MailToUser(Subject, Body, att.Student.UserName + "@dublinschool.org", att.Student.FirstName + " " + att.Student.LastName, Sender);
                MailToUser(Subject, Body, att.Student.Teacher.UserName + "@dublinschool.org", att.Student.Teacher.FirstName + " " + att.Student.Teacher.LastName, Sender);
                MailToUser(Subject, Body, Sender);
            }
            catch (Exception e)
            {
                String Message = e.Message;
                while(e.InnerException != null)
                {
                    e = e.InnerException;
                    Message += "\n\n" + e.Message + "\n\n" + e.StackTrace;
                }
                MailControler.MailToWebmaster("Failed to Send Attendance Update Message from " + Sender.UserName, "Attendance Update Email Failed to Send.  Exception info:\n\n" + Message, Sender);
            }
        }*/

        /*
    public static void SportsListBlastEmail(List<int> StudentIDs, DateTime AttendanceWeekMarker = new DateTime())
    {
        String ConfirmationEmailContent = "The Following Students have been notified of their Sports Attendance status.\n\n";

        DateTime Start = AttendanceCalculator.AttendanceWeekStart(AttendanceWeekMarker);
        DateTime End = AttendanceCalculator.AttendanceWeekEnd(AttendanceWeekMarker);

        using (WebhostEntities db = new WebhostEntities())
        {
            ConfirmationEmailContent += "One Hour Detention:\n\n";
            foreach (int sid in StudentIDs)
            {
                Student student = db.Students.Where(s => s.ID == sid).Single();
                var RelevantAttendances = student.Attendances.Where(att => att.AttendanceTypeID == 5 && att.AttLabelID == 4 && att.AttendanceDate >= Start && att.AttendanceDate < End).OrderBy(att => att.AttendanceDate);

                ConfirmationEmailContent += student.FirstName + " " + student.LastName + "\n";

                String StudentEmailContent = "Dear " + student.FirstName + ",\n\n" +
                                             "You have been marked for Sports Attendance Infractions for the week prior to " + End.ToLongDateString() + " as follows:\n";

                foreach (Attendance attendance in RelevantAttendances)
                {
                    StudentEmailContent += attendance.AttendanceDate.ToShortDateString() + "\t" +
                                           attendance.AttendanceLabel.AttLabelLong + "\t";

                    if (attendance.SectionID.HasValue)
                    {
                        StudentEmailContent += "[" + attendance.Section.Block.BlockName + "-Block] " + attendance.Section.Course.CourseName + "\t";
                    }
                    else
                    {
                        StudentEmailContent += attendance.AttendanceType.TypeName + "\t";
                    }

                    StudentEmailContent += attendance.Teacher.FirstName + " " + attendance.Teacher.LastName + "\n";
                }

                StudentEmailContent += "\nIf Any of these attendances need to be appealed, please first see the teacher who has assigned this attendance (in the 4th column of the above table).\n" +
                                       "Thankyou,\n" +
                                       "Attendance Bot\n\n" +
                                       "CC:  " + student.Teacher.FirstName + " " + student.Teacher.LastName + " (Advisor)\n" +
                                       "Confirmation of this email has been sent to " + DeanOfStudentsName + " (Dean of Students)";

                MailControler.MailToUser("Sports Attendance Notice", StudentEmailContent, student.UserName + "@dublinschool.org", student.FirstName + " " + student.LastName, DeanOfStudentsAdd, DeanOfStudentsName);
                MailControler.MailToUser("Advisee Sports Attendance Notice", StudentEmailContent, student.Teacher.UserName + "@dublinschool.org", student.Teacher.FirstName + " " + student.Teacher.LastName, DeanOfStudentsAdd, DeanOfStudentsName);
            }

            MailToUser("Sports Attendance Update Sent Confirmation", ConfirmationEmailContent, DeanOfStudentsAdd, DeanOfStudentsName, "noreply@dublinschool.org", "Attendance Bot");
            MailToUser("Sports Attendance Update Sent Confirmation", ConfirmationEmailContent, AthleticsDirectorAdd, AthleticsDirectorName, "noreply@dublinschool.org", "Attendance Bot");
        }
    }*/

        /*
    public static void DetentionListBlastEmail(List<int> OneHourSIDs, List<int> TwoHourSIDs, DateTime AttendanceWeekMarker = new DateTime())
    {
        String ConfirmationEmailContent = "The Following Students have been notified of their Detention List status.\n\n";

        DateTime Start = AttendanceCalculator.AttendanceWeekStart(AttendanceWeekMarker);
        DateTime End = AttendanceCalculator.AttendanceWeekEnd(AttendanceWeekMarker);

        using (WebhostEntities db = new WebhostEntities())
        {
            ConfirmationEmailContent += "One Hour Detention:\n\n";
            foreach (int sid in OneHourSIDs)
            {
                Student student = db.Students.Where(s => s.ID == sid).Single();
                var RelevantAttendances = student.Attendances.Where(att => att.AttendanceType.WeightInDetention > 0 && (att.AttLabelID == 2 || att.AttLabelID == 4) && att.AttendanceDate >= Start && att.AttendanceDate < End).OrderBy(att => att.AttendanceDate);

                ConfirmationEmailContent += student.FirstName + " " + student.LastName + "\n";

                String StudentEmailContent = "Dear " + student.FirstName + ",\n\n" +
                                             "You are marked on the One Hour Detention List for " + End.ToLongDateString() + " for the following attendance infractions:\n";

                foreach (Attendance attendance in RelevantAttendances)
                {
                    StudentEmailContent += attendance.AttendanceDate.ToShortDateString() + "\t" +
                                           attendance.AttendanceLabel.AttLabelLong + "\t";

                    if (attendance.SectionID.HasValue)
                    {
                        StudentEmailContent += "[" + attendance.Section.Block.BlockName + "-Block] " + attendance.Section.Course.CourseName + "\t";
                    }
                    else
                    {
                        StudentEmailContent += attendance.AttendanceType.TypeName + "\t";
                    }

                    StudentEmailContent += attendance.Teacher.FirstName + " " + attendance.Teacher.LastName + "\n";
                }

                StudentEmailContent += "\nIf Any of these attendances need to be appealed, please first see the teacher who has assigned this attendance (in the 4th column of the above table).\n" +
                                       "Thankyou,\n" +
                                       "Attendance Bot\n\n" +
                                       "CC:  " + student.Teacher.FirstName + " " + student.Teacher.LastName + " (Advisor)\n" +
                                       "Confirmation of this email has been sent to " + DeanOfStudentsName + " (Dean of Students)";

                MailControler.MailToUser("One Hour Detention Notice", StudentEmailContent, student.UserName + "@dublinschool.org", student.FirstName + " " + student.LastName, DeanOfStudentsAdd, DeanOfStudentsName);
                MailControler.MailToUser("Advisee One Hour Detention Notice", StudentEmailContent, student.Teacher.UserName + "@dublinschool.org", student.Teacher.FirstName + " " + student.Teacher.LastName, DeanOfStudentsAdd, DeanOfStudentsName);
            }

            ConfirmationEmailContent += "\n_________________________________________________\nTwo Hour Detention:\n\n";

            foreach (int sid in TwoHourSIDs)
            {
                Student student = db.Students.Where(s => s.ID == sid).Single();
                var RelevantAttendances = student.Attendances.Where(att => att.NeedsAttention && att.AttendanceDate >= Start && att.AttendanceDate < End).OrderBy(att => att.AttendanceDate);

                ConfirmationEmailContent += student.FirstName + " " + student.LastName + "\n";

                String StudentEmailContent = "Dear " + student.FirstName + ",\n\n" +
                                             "You are marked on the Two Hour Detention List for " + End.ToLongDateString() + " for the following attendance infractions:\n";

                foreach (Attendance attendance in RelevantAttendances)
                {
                    StudentEmailContent += attendance.AttendanceDate.ToShortDateString() + "\t" +
                                           attendance.AttendanceLabel.AttLabelLong + "\t";

                    if (attendance.SectionID.HasValue)
                    {
                        StudentEmailContent += "[" + attendance.Section.Block.BlockName + "-Block] " + attendance.Section.Course.CourseName + "\t";
                    }
                    else
                    {
                        StudentEmailContent += attendance.AttendanceType.TypeName + "\t";
                    }

                    StudentEmailContent += attendance.Teacher.FirstName + " " + attendance.Teacher.LastName + "\n";
                }

                StudentEmailContent += "\nIf Any of these attendances need to be appealed, please first see the teacher who has assigned this attendance (in the 4th column of the above table).\n" +
                                       "Thankyou,\n" +
                                       "Attendance Bot\n\n" +
                                       "CC:  " + student.Teacher.FirstName + " " + student.Teacher.LastName + " (Advisor)\n" +
                                       "Confirmation of this email has been sent to " + DeanOfStudentsName + " (Dean of Students)";

                MailControler.MailToUser("Two Hour Detention Notice", StudentEmailContent, student.UserName + "@dublinschool.org", student.FirstName + " " + student.LastName, DeanOfStudentsAdd, DeanOfStudentsName);
                MailControler.MailToUser("Advisee Two Hour Detention Notice", StudentEmailContent, student.Teacher.UserName + "@dublinschool.org", student.Teacher.FirstName + " " + student.Teacher.LastName, DeanOfStudentsAdd, DeanOfStudentsName);
            }

            MailToUser("Detention List Sent Confirmation", ConfirmationEmailContent, DeanOfStudentsAdd, DeanOfStudentsName, "noreply@dublinschool.org", "Attendance Bot");
        }
    }*/

        #endregion
    }
}
